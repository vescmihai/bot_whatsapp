"""
Script de prueba simple para verificar el sistema de env√≠o de PDFs
Ejecutar ANTES del sistema completo para verificar que todo funciona
"""

import os
import sys
import mysql.connector

def verificar_python():
    """Verificar versi√≥n de Python"""
    print("üêç Verificando Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Necesitas Python 3.8+")
        return False

def verificar_dependencias():
    """Verificar que las dependencias est√©n instaladas"""
    print("\nüì¶ Verificando dependencias...")
    dependencias = [
        ('mysql.connector', 'mysql-connector-python'),
        ('win32com.client', 'pywin32'),
        ('pathlib', 'built-in'),
        ('base64', 'built-in'),
        ('json', 'built-in')
    ]
    
    todas_ok = True
    for modulo, paquete in dependencias:
        try:
            __import__(modulo)
            print(f"‚úÖ {modulo} - OK")
        except ImportError:
            print(f"‚ùå {modulo} - Instalar: pip install {paquete}")
            todas_ok = False
    
    return todas_ok

def verificar_directorios():
    """Verificar y crear directorios necesarios"""
    print("\nüìÅ Verificando directorios...")
    directorios = [
        "C:\\EmailAutomation",
        "C:\\EmailAutomation\\logs", 
        "C:\\EmailAutomation\\temp_pdfs"
    ]
    
    for directorio in directorios:
        if os.path.exists(directorio):
            print(f"‚úÖ {directorio} - Existe")
        else:
            try:
                os.makedirs(directorio, exist_ok=True)
                print(f"‚úÖ {directorio} - Creado")
            except Exception as e:
                print(f"‚ùå {directorio} - Error: {e}")
                return False
    return True

def verificar_base_datos():
    """Verificar conexi√≥n a base de datos"""
    print("\nüóÑÔ∏è Verificando base de datos...")
    try:
        config = {
            'host': 'localhost',
            'user': 'root',
            'password': '',
            'database': 'bot_productos_db',
            'charset': 'utf8mb4'
        }
        
        conexion = mysql.connector.connect(**config)
        cursor = conexion.cursor()
        
        # Verificar tabla cliente existe
        cursor.execute("SHOW TABLES LIKE 'cliente'")
        if cursor.fetchone():
            print("‚úÖ Tabla 'cliente' - Existe")
        else:
            print("‚ùå Tabla 'cliente' - No existe")
            return False
        
        # Verificar campo email existe
        cursor.execute("SHOW COLUMNS FROM cliente LIKE 'email'")
        if cursor.fetchone():
            print("‚úÖ Campo 'email' en tabla cliente - Existe")
        else:
            print("‚ùå Campo 'email' en tabla cliente - No existe")
            print("üí° Ejecutar: ALTER TABLE cliente ADD COLUMN email VARCHAR(255);")
            return False
        
        # Verificar clientes con email
        cursor.execute("SELECT COUNT(*) FROM cliente WHERE email IS NOT NULL AND email != ''")
        count = cursor.fetchone()[0]
        if count > 0:
            print(f"‚úÖ Clientes con email configurado: {count}")
        else:
            print("‚ö†Ô∏è No hay clientes con email configurado")
            print("üí° Agregar email a alg√∫n cliente para pruebas")
        
        conexion.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando a BD: {e}")
        return False

def verificar_outlook():
    """Verificar que Outlook est√© disponible"""
    print("\nüìß Verificando Outlook...")
    try:
        import win32com.client as win32
        outlook = win32.Dispatch('outlook.application')
        print("‚úÖ Outlook - Disponible y configurado")
        return True
    except Exception as e:
        print(f"‚ùå Outlook - Error: {e}")
        print("üí° Soluciones:")
        print("   - Abrir Outlook manualmente")
        print("   - Configurar una cuenta de email")
        print("   - Instalar Microsoft Outlook")
        return False

def verificar_proyecto_bot():
    """Verificar que el proyecto bot est√© accesible"""
    print("\nü§ñ Verificando proyecto bot...")
    
    # Rutas comunes donde podr√≠a estar el proyecto
    rutas_posibles = [
        r'C:\Users\usuario\Desktop\bot_whatsapp',
        r'C:\bot_whatsapp',
        r'C:\proyecto_bot',
        r'D:\bot_whatsapp'
    ]
    
    print("üîç Buscando proyecto en rutas comunes...")
    for ruta in rutas_posibles:
        if os.path.exists(ruta):
            archivos_bot = ['generar_pdf.py', 'entrenamiento_fino.py']
            archivos_encontrados = [f for f in archivos_bot if os.path.exists(os.path.join(ruta, f))]
            
            if len(archivos_encontrados) == len(archivos_bot):
                print(f"‚úÖ Proyecto bot encontrado en: {ruta}")
                print(f"   Archivos: {', '.join(archivos_encontrados)}")
                return ruta
            else:
                print(f"‚ö†Ô∏è Ruta parcial en {ruta} - Faltan: {set(archivos_bot) - set(archivos_encontrados)}")
    
    print("‚ùå Proyecto bot no encontrado en rutas comunes")
    print("üí° Necesitas:")
    print("   1. Ubicar tu proyecto bot")
    print("   2. Actualizar la l√≠nea ~15 en flujo_email_pdfs.py")
    print("   3. sys.path.append(r'RUTA_A_TU_PROYECTO')")
    return None

def verificar_archivos_script():
    """Verificar que los archivos del script est√©n en lugar correcto"""
    print("\nüìÑ Verificando archivos del script...")
    
    archivos_necesarios = [
        "C:\\EmailAutomation\\flujo_email_pdfs.py",
        "C:\\EmailAutomation\\config_email.json"
    ]
    
    for archivo in archivos_necesarios:
        if os.path.exists(archivo):
            print(f"‚úÖ {os.path.basename(archivo)} - Existe")
        else:
            print(f"‚ùå {os.path.basename(archivo)} - No existe")
            return False
    
    return True

def main():
    """Ejecutar todas las verificaciones"""
    print("üîç VERIFICACI√ìN COMPLETA DEL SISTEMA")
    print("=" * 50)
    
    verificaciones = [
        ("Python", verificar_python),
        ("Dependencias", verificar_dependencias), 
        ("Directorios", verificar_directorios),
        ("Base de Datos", verificar_base_datos),
        ("Outlook", verificar_outlook),
        ("Proyecto Bot", verificar_proyecto_bot),
        ("Archivos Script", verificar_archivos_script)
    ]
    
    resultados = {}
    
    for nombre, funcion in verificaciones:
        try:
            resultado = funcion()
            resultados[nombre] = resultado
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n {nombre}: {e}")
            resultados[nombre] = False
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACIONES")
    print("=" * 50)
    
    exitosas = 0
    for nombre, resultado in resultados.items():
        estado = "‚úÖ OK" if resultado else "‚ùå FALLA"
        print(f"{nombre:<20}: {estado}")
        if resultado:
            exitosas += 1
    
    print(f"\nüéØ Resultado: {exitosas}/{len(verificaciones)} verificaciones exitosas")
    
    if exitosas == len(verificaciones):
        print("üéâ ¬°SISTEMA LISTO PARA USAR!")
        print("‚ñ∂Ô∏è Puedes ejecutar: python flujo_email_pdfs.py")
    else:
        print("‚ö†Ô∏è Solucionar problemas antes de continuar")
        print("üìã Revisar los ‚ùå arriba para ver qu√© falta")

if __name__ == "__main__":
    main()